Creational Patterns	These patterns provide ways to instantiate single objects or groups of related objects.&nbsp;<div><br></div><div>There are five GOF creational patterns.</div>
Structural Patterns	These patterns provide a manner to define relationships between classes or objects.&nbsp;<div><br></div><div>There are 7 GOF structural patterns.</div>
Behavioral Patterns	Behavioural patterns define manners of communication between classes and objects. There are 11 GOF behavioral patterns.
List the 5 GOF Creational Patterns	"<div style=""text-align: left""><div>- Abstract Factory</div><div>- Builder</div><div>- Factory Method</div><div>- Prototype</div><div>- Singleton</div></div>"
List the 7 GOF Structural Patterns	"<div style=""text-align: left""><div>- Adapter</div><div>- Bridge</div><div>- Composite</div><div>- Decorator</div><div>- Facade</div><div>- Flyweight</div><div>- Proxy</div></div>"
List the 11 GOF Behavioral Design Patterns	"<div style=""text-align: left""><div>- Chain of Responsibility</div><div>- Command</div><div>- Interpreter</div><div>- Iterator</div><div>- Mediator</div><div>- Memento</div><div>- Observer</div><div>- State</div><div>- Strategy</div><div>- Template Method</div><div>- Visitor</div></div>"
How many GOF design patterns are there?	23
What are design patterns?	"<div>Solutions to common software design problems.&nbsp;</div><div><br></div><div>They give generalised solutions in the form of templates that may be applied to real-world problems.</div><div><br></div> <div style=""text-align: left""><div>- OOP Specific, generally solve the problems of:</div><div>&nbsp; &nbsp; - object generation</div><div>&nbsp; &nbsp; - object interaction</div><div>- <b>NOT</b>&nbsp;larger scale problems of overall software architecture</div><div></div></div>"
Abstract Factory - Creational	"The abstract factory pattern is used to provide a client with a set of related or dependant objects. The ""family"" of objects created by the factory are determined at run-time."
Builder - Creational	The builder pattern is used to create complex objects with constituent parts that must be created in the same order or using a specific algorithm. An external class controls the construction algorithm.
Factory Method - Creational	"The factory pattern is used to replace class&nbsp;<a href=""http://www.blackwasp.co.uk/CSharpConstructors.aspx"">constructors</a>, abstracting the process of object generation so that the type of the object instantiated can be determined at run-time."
Prototype - Creational	The prototype pattern is used to instantiate a new object by copying all of the properties of an existing object, creating an independent clone. This practise is particularly useful when the construction of a new object is inefficient.
Singleton - Creational	The singleton pattern ensures that only one object of a particular class is ever created. All further references to objects of the singleton class refer to the same underlying instance.
Adapter - Structural	"The adapter pattern is used to provide a link between two otherwise incompatible types by wrapping the ""adaptee"" with a class that supports the interface required by the client."
Bridge - Structural	The bridge pattern is used to separate the abstract elements of a class from the implementation details, providing the means to replace the implementation details without modifying the abstraction.
Composite - Structural	The composite pattern is used to create hierarchical, recursive tree structures of related objects where any element of the structure may be accessed and utilised in a standard manner.
Decorator	"The decorator pattern is used to extend or alter the functionality of objects at run-time by wrapping them in an object of a decorator class. This provides a flexible alternative to using&nbsp;<a href=""http://www.blackwasp.co.uk/Inheritance.aspx"">inheritance</a>&nbsp;to modify behaviour."
Facade - Structural	The facade pattern is used to define a simplified interface to a more complex subsystem.
Flyweight - Structural	The flyweight pattern is used to reduce the memory and resource usage for complex models containing many hundreds, thousands or hundreds of thousands of similar objects.
Proxy - Structural	The proxy pattern is used to provide a surrogate or placeholder object, which references an underlying object. The proxy provides the same public interface as the underlying subject class, adding a level of indirection by accepting requests from a client object and passing these to the real subject object as necessary.
Chain of Responsibility - Behavioral	The chain of responsibility pattern is used to process varied requests, each of which may be dealt with by a different handler.
Command - Behavioral	"The command pattern is used to express a request, including the call to be made and all of its required&nbsp;<a href=""http://www.blackwasp.co.uk/CSharpMethodParameters.aspx"">parameters</a>, in a command object. The command may then be executed immediately or held for later use."
Interpreter - Behavioral	The interpreter pattern is used to define the grammar for instructions that form part of a language or notation, whilst allowing the grammar to be easily extended.
Iterator - Behavioral	The iterator pattern is used to provide a standard interface for traversing a collection of items in an aggregate object without the need to understand its underlying structure.
Mediator - Behavioral	The mediator pattern is used to reduce coupling between classes that communicate with each other. Instead of classes communicating directly, and thus requiring knowledge of their implementation, the classes send messages via a mediator object.
Memento - Behavioral	The memento pattern is used to capture the current state of an object and store it in such a manner that it can be restored at a later time without breaking the rules of encapsulation.
Observer - Behavioral	The observer pattern is used to allow an object to publish changes to its state. Other objects subscribe to be immediately notified of any changes.
State - Behavioral	The state pattern is used to alter the behaviour of an object as its internal state changes. The pattern allows the class for an object to apparently change at run-time.
Strategy - Behavioral	The strategy pattern is used to create an interchangeable family of algorithms from which the required process is chosen at run-time.
Template Method - Behavioral	The template method pattern is used to define the basic steps of an algorithm and allow the implementation of the individual steps to be changed.
Visitor - Behavioral	The visitor pattern is used to separate a relatively complex set of structured data classes from the functionality that may be performed upon the data that they hold.
What are design patterns?	"<span style=""color: rgb(32, 33, 34);"">Design patterns may be viewed as a structured approach to&nbsp;</span><a href=""https://en.wikipedia.org/wiki/Computer_programming"">computer programming</a><span style=""color: rgb(32, 33, 34);"">&nbsp;intermediate between the levels of a&nbsp;</span><a href=""https://en.wikipedia.org/wiki/Programming_paradigm"">programming paradigm</a><span style=""color: rgb(32, 33, 34);"">&nbsp;and a concrete&nbsp;</span><a href=""https://en.wikipedia.org/wiki/Algorithm"">algorithm</a><span style=""color: rgb(32, 33, 34);"">.</span>"
How many design patterns are there?	"Trick question! There isn't a fixed reference.&nbsp;<div><br></div><div>Review wikipedia to see the many categories and contexts of design patterns.&nbsp;</div><div><br></div><div>Articles:</div><div>- Wikipedia:&nbsp;<a href=""https://en.wikipedia.org/wiki/Software_design_pattern"">https://en.wikipedia.org/wiki/Software_design_pattern</a></div><div><br></div><div>Books:</div><div>-<span style=""color: rgb(32, 33, 34);"">&nbsp;</span><a href=""https://en.wikipedia.org/wiki/Design_Patterns_(book)""><i>Design Patterns: Elements of Reusable Object-Oriented Software</i></a><span style=""color: rgb(32, 33, 34);"">&nbsp;</span></div><div><span style=""color: rgb(32, 33, 34);""><br></span></div><div><span style=""color: rgb(32, 33, 34);"">-&nbsp;</span><i><a href=""https://en.wikipedia.org/wiki/Code_Complete"">Code Complete</a></i></div>"
